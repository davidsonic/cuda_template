/*
 * add_two_arrays.cu
 *
 *  Created on: May 19, 2019
 *      Author: jiali
 */


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>

bool compare_result(int *res_gpu, int *res_cpu, int size){
	bool ret = true;
	for(int i=0;i<size;i++)
		if(res_gpu[i] != res_cpu[i])
			return false;
	return ret;
}

__global__ void calc_add_gpu(int*a, int*b, int*c, int size){
	int gid = threadIdx.x + blockDim.x * blockIdx.x;
	if(gid<size)
		c[gid] = a[gid] + b[gid];
}

int main(){
	int size = 128;
	int byte_size = sizeof(int) * size;

	int *hData_a = (int*)malloc(byte_size);
	int *hData_b = (int*)malloc(byte_size);
	int *hData_c = (int*)malloc(byte_size);
	int *hData_res = (int*)malloc(byte_size);


	int *dData_a;
	cudaMalloc(dData_a, byte_size);
	cudaMemcpy(dData_a, hData_a, byte_size, cudaMemcpyHostToDevice);

	int *dData_b;
	cudaMalloc(dData_b, byte_size);
	cudaMemcpy(dData_b, hData_b, byte_size, cudaMemcpyHostToDevice);

	int *dData_c;
	cudaMalloc(dData_c, byte_size);


	// CPU operation
	for(int i=0;i<size;i++){
		hData_c[i] = hData_a[i] + hData_b[i];
	}

	//GPU operation
	dim3 block(64,1,1);
	dim3 grid(2, 1, 1);
	calc_add_gpu<< <grid, block>> >(dData_a, dData_b, dData_c, size);
	cudaMemcpy(hData_res, dData_c, byte_size, cudaMemcpyDeviceToHost);


	//validity check
	bool comp = compare_result(hData_res, hData_c);
	if(comp)
		printf("Comparison result is same\n");
	else
		printf("Comparison result is not the same\n");

	cudaDeviceSynchronize();

	//free up memory
	cudaFree(dData_a);
	cudaFree(dData_b);
	cudaFree(dData_c);

	free(hData_a);
	free(hData_b);
	free(hData_c);


	cudaDeviceReset();
	return 0;

}




